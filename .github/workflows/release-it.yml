name: ipc-chip-build

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build-musl-static:
    runs-on: ubuntu-latest

    env:
      TOOLCHAIN: arm-unknown-linux-musleabi

    steps:
      - uses: pozetroninc/github-action-get-latest-release@master
        id: ct-ng-release
        with:
          owner: widgetii
          repo: ct-ng-builds

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build sources
        run: |
          HEAD_TAG=$(git tag --points-at HEAD)
          GIT_HASH=$(git rev-parse --short $GITHUB_SHA)
          if [ -z "$HEAD_TAG" ]; then
            TAG_NAME="latest"
            RELEASE_NAME="Development Build"
            PRERELEASE=true
          else
            TAG_NAME=${{ github.ref }}
            RELEASE_NAME="Release ${{ github.ref }}"
            PRERELEASE=false
          fi
          echo "GIT_HASH=$GIT_HASH" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV

          REL="${{ steps.ct-ng-release.outputs.release }}"
          echo "Got release $REL"
          wget -qO- https://github.com/widgetii/ct-ng-builds/releases/download/$REL/$TOOLCHAIN.tar.xz2 | \
            tar xfJ - -C /opt
          export PATH=/opt/$TOOLCHAIN/bin:$PATH
          sudo apt install -y cmake upx-ucl
          cmake -H. -Bbuild -DCMAKE_C_COMPILER=${TOOLCHAIN}-gcc -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          upx build/ipc_chip_info
          cp build/ipc_chip_info ipc_chip_info-$GIT_HASH

      - name: Send notification if build failed
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_TOKEN_BOT_OPENIPC }}
          TG_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL_OPENIPC_DEV }}
          TG_OPTIONS: -s --connect-timeout 5 --max-time 15
          TG_NOTIFY: $(echo -e "\xF0\x9F\x92\xA9 OpenIPC %0AGitHub Actions %0AWarning, ipc_chip_info build error...")
        if: cancelled() == false
        run: curl $TG_OPTIONS -X POST https://api.telegram.org/bot$TG_TOKEN/sendMessage -d chat_id=$TG_CHANNEL -d text="$TG_NOTIFY"

      - name: Create release
        uses: actions/create-release@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: ${{ env.PRERELEASE }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "build/ipc_chip_info"
          asset_name: "ipc_chip_info"
          tag: ${{ env.TAG_NAME }}
          overwrite: true

      - name: Publish file on S3 for HTTP access (for dev versions)
        if: env.HEAD_TAG == ''
        uses: tpaschalis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          FILE: ./ipc_chip_info-${{ env.GIT_HASH }}
          AWS_REGION: 'eu-north-1'
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Trigger CI tests
        if: env.HEAD_TAG == ''
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: OpenIPC/ipc_chip_info
          event-type: ci-tests
          client-payload: '{"sha": "${{ env.GIT_HASH }}"}'

      - name: Send message to channel
        env:
          TG_KEY: ${{ secrets.TELEGRAM_TOKEN_BOT_OPENIPC }}
          TG_CNL: ${{ secrets.TELEGRAM_CHANNEL_OPENIPC_DEV }}
          TG_OPT: -s --connect-timeout 5 --max-time 15
        run: curl $TG_OPT -F document="@build/ipc_chip_info" "https://api.telegram.org/bot$TG_KEY/sendDocument?chat_id=$TG_CNL"
